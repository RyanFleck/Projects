package com.rcf.algorithms;

import java.util.ArrayList;

import com.rcf.algorithms.utils.ArrayUtil;

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 */

public class Fibonacci {

    public static int[] generateTo( int ceil ) {
        return ArrayUtil.toIntArray( generateFibAL( ceil ) );
    }

    public static int[] generateToEven( int ceil ) {
        ArrayList<Integer> fib = generateFibAL( ceil );
        int fib_len = fib.size();
        for ( int x = 0; x < fib_len; ) {
            if ( fib.get( x ) % 2 != 0 ) {
                fib.remove( x );
                --fib_len;
            } else {
                ++x;
            }
        }

        return ArrayUtil.toIntArray( fib );
    }

    private static ArrayList<Integer> generateFibAL( int ceil ) {
        ArrayList<Integer> fseq = new ArrayList<Integer>();
        fseq.add( 0 );
        int next = 1;
        while ( next < ceil ) {
            fseq.add( next );
            next = fseq.get( fseq.size() - 1 ) + fseq.get( fseq.size() - 2 );
        }
        return fseq;
    }

}
